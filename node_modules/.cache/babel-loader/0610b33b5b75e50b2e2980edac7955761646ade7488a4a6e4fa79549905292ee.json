{"ast":null,"code":"var _jsxFileName = \"/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport \"../styles/SnakeGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n\n  // State for game board pixels\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n\n  // State for current food position\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(0);\n\n  // State for snake direction\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39); // Initial direction: RIGHT\n\n  // State for current snake head position\n  const [currentSnakeHeadPosition, setCurrentSnakeHeadPosition] = useState(SQUARE_OF_GAME_PIXEL_COUNT / 2);\n\n  // State for snake length\n  const [snakeLength, setSnakeLength] = useState(1000);\n\n  // State for total food ate\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n\n  // State for total distance travelled\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n\n  // useEffect to create initial game board pixels and food\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  // useEffect to move the snake\n  useEffect(() => {\n    const moveSnakeInterval = setInterval(moveSnake, 80);\n    return () => clearInterval(moveSnakeInterval); // Cleanup on component unmount\n  }, [currentSnakeHeadPosition, snakeCurrentDirection]);\n\n  // useEffect to handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = e => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown); // Cleanup on component unmount\n  }, [snakeCurrentDirection]);\n\n  // Function to create game board pixels\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n\n  // Function to create initial food\n  const createFood = () => {\n    setGameBoardPixels(prevPixels => {\n      const newPixels = [...prevPixels];\n      if (currentFoodPosition !== null) {\n        newPixels[currentFoodPosition] = 0;\n      }\n      let newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      while (newPixels[newFoodPosition] === 1) {\n        newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      }\n      newPixels[newFoodPosition] = 'food';\n      setCurrentFoodPosition(newFoodPosition);\n      return newPixels;\n    });\n  };\n\n  // Function to change snake direction\n  const changeDirection = newDirectionCode => {\n    // Change the direction of the snake\n    if (newDirectionCode === snakeCurrentDirection) return;\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n\n  // Function to move the snake\n  const moveSnake = () => {\n    // Logic to move the snake, update state accordingly\n    let nextSnakeHeadPosition;\n    switch (snakeCurrentDirection) {\n      case 37:\n        // LEFT\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 38:\n        // UP\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 39:\n        // RIGHT\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 40:\n        // DOWN\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      default:\n        break;\n    }\n\n    // Update the game board pixels array to reflect the new snake position\n    setGameBoardPixels(prevPixels => {\n      const newPixels = [...prevPixels];\n\n      // Remove the tail of the snake (set its value to 0)\n      // ...\n\n      // Add the new head position to the snake (set its value to 1)\n      // ...\n\n      return newPixels;\n    });\n\n    // Update total distance travelled\n    setTotalDistanceTravelled(prevDistance => prevDistance + 1);\n\n    // Check for collision with food and update state\n    if (nextSnakeHeadPosition === currentFoodPosition) {\n      // Update total food ate\n      setTotalFoodAte(prevFood => prevFood + 1);\n\n      // Increase Snake length:\n      setSnakeLength(prevLength => prevLength + 100);\n\n      // Create new food\n      createFood();\n    }\n\n    // Check for collision with itself and end the game if necessary\n    if (gameBoardPixels[nextSnakeHeadPosition] === 'snakeBodyPixel') {\n      // Stop moving the snake\n      clearInterval(moveSnakeInterval);\n      if (!alert(`You have eaten ${totalFoodAte} food by traveling ${totalDistanceTravelled} blocks.`)) window.location.reload();\n    }\n  };\n\n  // JSX to render the game board\n  // ... (Same as before)\n\n  // JSX to render the game board\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameBoardPixels.map((pixel, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `gameBoardPixel ${pixel}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 162,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"FT5lf0Yfz+ae+8U/Y19R2b+pzBM=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SnakeGame","_s","GAME_PIXEL_COUNT","SQUARE_OF_GAME_PIXEL_COUNT","Math","pow","gameBoardPixels","setGameBoardPixels","Array","fill","currentFoodPosition","setCurrentFoodPosition","snakeCurrentDirection","setSnakeCurrentDirection","currentSnakeHeadPosition","setCurrentSnakeHeadPosition","snakeLength","setSnakeLength","totalFoodAte","setTotalFoodAte","totalDistanceTravelled","setTotalDistanceTravelled","createGameBoardPixels","createFood","moveSnakeInterval","setInterval","moveSnake","clearInterval","handleKeyDown","e","changeDirection","keyCode","document","addEventListener","removeEventListener","prevPixels","newPixels","newFoodPosition","floor","random","newDirectionCode","nextSnakeHeadPosition","prevDistance","prevFood","prevLength","alert","window","location","reload","children","map","pixel","index","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport \"../styles/SnakeGame.css\";\n\n\nconst SnakeGame = () => {\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n\n  // State for game board pixels\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n\n  // State for current food position\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(0);\n\n  // State for snake direction\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39); // Initial direction: RIGHT\n\n  // State for current snake head position\n  const [currentSnakeHeadPosition, setCurrentSnakeHeadPosition] = useState(SQUARE_OF_GAME_PIXEL_COUNT / 2);\n\n  // State for snake length\n  const [snakeLength, setSnakeLength] = useState(1000);\n\n  // State for total food ate\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n\n  // State for total distance travelled\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n\n  // useEffect to create initial game board pixels and food\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []); // Empty dependency array to run the effect only once on mount\n\n  // useEffect to move the snake\n  useEffect(() => {\n    const moveSnakeInterval = setInterval(moveSnake, 80);\n\n    return () => clearInterval(moveSnakeInterval); // Cleanup on component unmount\n  }, [currentSnakeHeadPosition, snakeCurrentDirection]);\n\n  // useEffect to handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (e) => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown); // Cleanup on component unmount\n  }, [snakeCurrentDirection]);\n\n  // Function to create game board pixels\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n\n  // Function to create initial food\n  const createFood = () => {\n    setGameBoardPixels((prevPixels) => {\n      const newPixels = [...prevPixels];\n      if (currentFoodPosition !== null) {\n        newPixels[currentFoodPosition] = 0;\n      }\n\n      let newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      while (newPixels[newFoodPosition] === 1) {\n        newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      }\n\n      newPixels[newFoodPosition] = 'food';\n      setCurrentFoodPosition(newFoodPosition);\n\n      return newPixels;\n    });\n  };\n\n  // Function to change snake direction\n  const changeDirection = (newDirectionCode) => {\n    // Change the direction of the snake\n    if (newDirectionCode === snakeCurrentDirection) return;\n\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n\n\n // Function to move the snake\nconst moveSnake = () => {\n    // Logic to move the snake, update state accordingly\n    let nextSnakeHeadPosition;\n  \n    switch (snakeCurrentDirection) {\n      case 37: // LEFT\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 38: // UP\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 39: // RIGHT\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      case 40: // DOWN\n        // Calculate the next position based on the current direction\n        // ...\n        break;\n      default:\n        break;\n    }\n  \n    // Update the game board pixels array to reflect the new snake position\n    setGameBoardPixels((prevPixels) => {\n      const newPixels = [...prevPixels];\n  \n      // Remove the tail of the snake (set its value to 0)\n      // ...\n  \n      // Add the new head position to the snake (set its value to 1)\n      // ...\n  \n      return newPixels;\n    });\n  \n    // Update total distance travelled\n    setTotalDistanceTravelled((prevDistance) => prevDistance + 1);\n  \n    // Check for collision with food and update state\n    if (nextSnakeHeadPosition === currentFoodPosition) {\n      // Update total food ate\n      setTotalFoodAte((prevFood) => prevFood + 1);\n  \n      // Increase Snake length:\n      setSnakeLength((prevLength) => prevLength + 100);\n  \n      // Create new food\n      createFood();\n    }\n  \n    // Check for collision with itself and end the game if necessary\n    if (gameBoardPixels[nextSnakeHeadPosition] === 'snakeBodyPixel') {\n      // Stop moving the snake\n      clearInterval(moveSnakeInterval);\n      if (!alert(`You have eaten ${totalFoodAte} food by traveling ${totalDistanceTravelled} blocks.`))\n        window.location.reload();\n    }\n  };\n  \n  // JSX to render the game board\n  // ... (Same as before)\n  \n\n  // JSX to render the game board\n  return (\n    <div>\n      {gameBoardPixels.map((pixel, index) => (\n        <div key={index} className={`gameBoardPixel ${pixel}`} />\n      ))}\n      {/* Other JSX for scores, controls, etc. */}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
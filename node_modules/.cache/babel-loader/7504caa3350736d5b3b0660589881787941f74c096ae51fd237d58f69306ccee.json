{"ast":null,"code":"var _jsxFileName = \"/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport \"../styles/SnakeGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SnakeGame() {\n  // GAME_PIXEL_COUNT is the pixels on horizontal or vertical axis of the game board (SQUARE).\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n  let totalFoodAte = 0;\n  let totalDistanceTravelled = 0;\n\n  /// THE GAME BOARD:\n  const gameContainer = document.getElementById(\"gameContainer\");\n  const createGameBoardPixels = () => {\n    let gamePixelDivs = '';\n    for (let i = 1; i <= SQUARE_OF_GAME_PIXEL_COUNT; ++i) {\n      gamePixelDivs = `${gamePixelDivs} <div class=\"gameBoardPixel\" id=\"pixel${i}\"></div>`;\n    }\n    // Populate the [#gameContainer] div with small div's representing game pixels\n    gameContainer.innerHTML = `${gameContainer.innerHTML} ${gamePixelDivs}`;\n  };\n\n  // This variable always holds the updated array of game pixels created by createGameBoardPixels() :\n  const gameBoardPixels = document.getElementsByClassName(\"gameBoardPixel\");\n\n  /// THE FOOD:\n  let currentFoodPostion = 0;\n  const createFood = () => {\n    // Remove previous food;\n    gameBoardPixels[currentFoodPostion].classList.remove(\"food\");\n\n    // Create new food\n    currentFoodPostion = Math.random();\n    currentFoodPostion = Math.floor(currentFoodPostion * SQUARE_OF_GAME_PIXEL_COUNT);\n    gameBoardPixels[currentFoodPostion].classList.add(\"food\");\n  };\n\n  /// THE SNAKE:\n\n  // Direction codes (Keyboard key codes for arrow keys):\n  const LEFT_DIR = 37;\n  const UP_DIR = 38;\n  const RIGHT_DIR = 39;\n  const DOWN_DIR = 40;\n\n  // Set snake direction initially to right\n  let snakeCurrentDirection = RIGHT_DIR;\n  const changeDirection = newDirectionCode => {\n    // Change the direction of the snake\n    if (newDirectionCode == snakeCurrentDirection) return;\n    if (newDirectionCode == LEFT_DIR && snakeCurrentDirection != RIGHT_DIR) {\n      snakeCurrentDirection = newDirectionCode;\n    } else if (newDirectionCode == UP_DIR && snakeCurrentDirection != DOWN_DIR) {\n      snakeCurrentDirection = newDirectionCode;\n    } else if (newDirectionCode == RIGHT_DIR && snakeCurrentDirection != LEFT_DIR) {\n      snakeCurrentDirection = newDirectionCode;\n    } else if (newDirectionCode == DOWN_DIR && snakeCurrentDirection != UP_DIR) {\n      snakeCurrentDirection = newDirectionCode;\n    }\n  };\n\n  // Let the starting position of the snake be at the middle of game board\n  let currentSnakeHeadPosition = SQUARE_OF_GAME_PIXEL_COUNT / 2;\n\n  // Initial snake length\n  let snakeLength = 1000;\n\n  // Move snake continously by calling this function repeatedly :\n  const moveSnake = () => {\n    switch (snakeCurrentDirection) {\n      case LEFT_DIR:\n        --currentSnakeHeadPosition;\n        const isSnakeHeadAtLastGameBoardPixelTowardsLeft = currentSnakeHeadPosition % GAME_PIXEL_COUNT == GAME_PIXEL_COUNT - 1 || currentSnakeHeadPosition < 0;\n        if (isSnakeHeadAtLastGameBoardPixelTowardsLeft) {\n          currentSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n        }\n        break;\n      case UP_DIR:\n        currentSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n        const isSnakeHeadAtLastGameBoardPixelTowardsUp = currentSnakeHeadPosition < 0;\n        if (isSnakeHeadAtLastGameBoardPixelTowardsUp) {\n          currentSnakeHeadPosition = currentSnakeHeadPosition + SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      case RIGHT_DIR:\n        ++currentSnakeHeadPosition;\n        const isSnakeHeadAtLastGameBoardPixelTowardsRight = currentSnakeHeadPosition % GAME_PIXEL_COUNT == 0;\n        if (isSnakeHeadAtLastGameBoardPixelTowardsRight) {\n          currentSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n        }\n        break;\n      case DOWN_DIR:\n        currentSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n        const isSnakeHeadAtLastGameBoardPixelTowardsDown = currentSnakeHeadPosition > SQUARE_OF_GAME_PIXEL_COUNT - 1;\n        if (isSnakeHeadAtLastGameBoardPixelTowardsDown) {\n          currentSnakeHeadPosition = currentSnakeHeadPosition - SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      default:\n        break;\n    }\n    let nextSnakeHeadPixel = gameBoardPixels[currentSnakeHeadPosition];\n\n    // Kill snake if it bites itself:\n    if (nextSnakeHeadPixel.classList.contains(\"snakeBodyPixel\")) {\n      // Stop moving the snake\n      clearInterval(moveSnakeInterval);\n      if (!alert(`You have ate ${totalFoodAte} food by travelling ${totalDistanceTravelled} blocks.`)) window.location.reload();\n    }\n    nextSnakeHeadPixel.classList.add(\"snakeBodyPixel\");\n    setTimeout(() => {\n      nextSnakeHeadPixel.classList.remove(\"snakeBodyPixel\");\n    }, snakeLength);\n\n    // Update total distance travelled\n    totalDistanceTravelled++;\n    // Update in UI:\n    document.getElementById(\"blocksTravelled\").innerHTML = totalDistanceTravelled;\n    if (currentSnakeHeadPosition == currentFoodPostion) {\n      // Update total food ate\n      totalFoodAte++;\n      // Update in UI:\n      document.getElementById(\"pointsEarned\").innerHTML = totalFoodAte;\n\n      // Increase Snake length:\n      snakeLength = snakeLength + 100;\n      createFood();\n    }\n  };\n\n  /// CALL THE FOLLOWING FUNCTIONS TO RUN THE GAME:\n\n  // Create game board pixels:\n  createGameBoardPixels();\n\n  // Create initial food:\n  createFood();\n\n  // Move snake:\n  var moveSnakeInterval = setInterval(moveSnake, 80);\n\n  // Call change direction function on keyboard key-down event:\n  addEventListener(\"keydown\", e => changeDirection(e.keyCode));\n\n  // ON SCREEN CONTROLLERS:\n  const leftButton = document.getElementById(\"leftButton\");\n  const rightButton = document.getElementById(\"rightButton\");\n  const upButton = document.getElementById(\"upButton\");\n  const downButton = document.getElementById(\"downButton\");\n  leftButton.onclick = () => changeDirection(LEFT_DIR);\n  rightButton.onclick = () => changeDirection(RIGHT_DIR);\n  upButton.onclick = () => changeDirection(UP_DIR);\n  downButton.onclick = () => changeDirection(DOWN_DIR);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"gameContainer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"scoreContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"scoreBoard\",\n        children: [\"Food: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"pointsEarned\",\n          children: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 47\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"scoreBoard\",\n        children: [\"Blocks: \", /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"blocksTravelled\",\n          children: \"0\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 49\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"onScreenControllers\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"leftButton\",\n        children: \"\\u25C0\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"upButton\",\n          children: \"\\uD83D\\uDD3C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"downButton\",\n          children: \"\\uD83D\\uDD3D\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"rightButton\",\n        children: \"\\u25B6\\uFE0F\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"developerDetails\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 9\n  }, this);\n}\n_c = SnakeGame;\n;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SnakeGame","GAME_PIXEL_COUNT","SQUARE_OF_GAME_PIXEL_COUNT","Math","pow","totalFoodAte","totalDistanceTravelled","gameContainer","document","getElementById","createGameBoardPixels","gamePixelDivs","i","innerHTML","gameBoardPixels","getElementsByClassName","currentFoodPostion","createFood","classList","remove","random","floor","add","LEFT_DIR","UP_DIR","RIGHT_DIR","DOWN_DIR","snakeCurrentDirection","changeDirection","newDirectionCode","currentSnakeHeadPosition","snakeLength","moveSnake","isSnakeHeadAtLastGameBoardPixelTowardsLeft","isSnakeHeadAtLastGameBoardPixelTowardsUp","isSnakeHeadAtLastGameBoardPixelTowardsRight","isSnakeHeadAtLastGameBoardPixelTowardsDown","nextSnakeHeadPixel","contains","clearInterval","moveSnakeInterval","alert","window","location","reload","setTimeout","setInterval","addEventListener","e","keyCode","leftButton","rightButton","upButton","downButton","onclick","children","id","fileName","_jsxFileName","lineNumber","columnNumber","class","_c","$RefreshReg$"],"sources":["/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport \"../styles/SnakeGame.css\";\n\nfunction SnakeGame() {\n    // GAME_PIXEL_COUNT is the pixels on horizontal or vertical axis of the game board (SQUARE).\n    const GAME_PIXEL_COUNT = 40;\n    const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n\n    let totalFoodAte = 0;\n    let totalDistanceTravelled = 0;\n\n    /// THE GAME BOARD:\n    const gameContainer = document.getElementById(\"gameContainer\");\n\n    const createGameBoardPixels = () => {\n        let gamePixelDivs = '';\n        for (let i = 1; i <= SQUARE_OF_GAME_PIXEL_COUNT; ++i) {\n            gamePixelDivs = `${gamePixelDivs} <div class=\"gameBoardPixel\" id=\"pixel${i}\"></div>`;\n        }\n        // Populate the [#gameContainer] div with small div's representing game pixels\n        gameContainer.innerHTML = `${gameContainer.innerHTML} ${gamePixelDivs}`;\n    };\n\n    // This variable always holds the updated array of game pixels created by createGameBoardPixels() :\n    const gameBoardPixels = document.getElementsByClassName(\"gameBoardPixel\");\n\n    /// THE FOOD:\n    let currentFoodPostion = 0;\n    const createFood = () => {\n        // Remove previous food;\n        gameBoardPixels[currentFoodPostion].classList.remove(\"food\");\n\n        // Create new food\n        currentFoodPostion = Math.random();\n        currentFoodPostion = Math.floor(\n            currentFoodPostion * SQUARE_OF_GAME_PIXEL_COUNT\n        );\n        gameBoardPixels[currentFoodPostion].classList.add(\"food\");\n    };\n\n    /// THE SNAKE:\n\n    // Direction codes (Keyboard key codes for arrow keys):\n    const LEFT_DIR = 37;\n    const UP_DIR = 38;\n    const RIGHT_DIR = 39;\n    const DOWN_DIR = 40;\n\n    // Set snake direction initially to right\n    let snakeCurrentDirection = RIGHT_DIR;\n\n    const changeDirection = (newDirectionCode) => {\n        // Change the direction of the snake\n        if (newDirectionCode == snakeCurrentDirection) return;\n\n        if (newDirectionCode == LEFT_DIR && snakeCurrentDirection != RIGHT_DIR) {\n            snakeCurrentDirection = newDirectionCode;\n        } else if (newDirectionCode == UP_DIR && snakeCurrentDirection != DOWN_DIR) {\n            snakeCurrentDirection = newDirectionCode;\n        } else if (\n            newDirectionCode == RIGHT_DIR &&\n            snakeCurrentDirection != LEFT_DIR\n        ) {\n            snakeCurrentDirection = newDirectionCode;\n        } else if (newDirectionCode == DOWN_DIR && snakeCurrentDirection != UP_DIR) {\n            snakeCurrentDirection = newDirectionCode;\n        }\n    };\n\n    // Let the starting position of the snake be at the middle of game board\n    let currentSnakeHeadPosition = SQUARE_OF_GAME_PIXEL_COUNT / 2;\n\n    // Initial snake length\n    let snakeLength = 1000;\n\n    // Move snake continously by calling this function repeatedly :\n    const moveSnake = () => {\n        switch (snakeCurrentDirection) {\n            case LEFT_DIR:\n                --currentSnakeHeadPosition;\n                const isSnakeHeadAtLastGameBoardPixelTowardsLeft =\n                    currentSnakeHeadPosition % GAME_PIXEL_COUNT == GAME_PIXEL_COUNT - 1 ||\n                    currentSnakeHeadPosition < 0;\n                if (isSnakeHeadAtLastGameBoardPixelTowardsLeft) {\n                    currentSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n                }\n                break;\n            case UP_DIR:\n                currentSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n                const isSnakeHeadAtLastGameBoardPixelTowardsUp =\n                    currentSnakeHeadPosition < 0;\n                if (isSnakeHeadAtLastGameBoardPixelTowardsUp) {\n                    currentSnakeHeadPosition =\n                        currentSnakeHeadPosition + SQUARE_OF_GAME_PIXEL_COUNT;\n                }\n                break;\n            case RIGHT_DIR:\n                ++currentSnakeHeadPosition;\n                const isSnakeHeadAtLastGameBoardPixelTowardsRight =\n                    currentSnakeHeadPosition % GAME_PIXEL_COUNT == 0;\n                if (isSnakeHeadAtLastGameBoardPixelTowardsRight) {\n                    currentSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n                }\n                break;\n            case DOWN_DIR:\n                currentSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n                const isSnakeHeadAtLastGameBoardPixelTowardsDown =\n                    currentSnakeHeadPosition > SQUARE_OF_GAME_PIXEL_COUNT - 1;\n                if (isSnakeHeadAtLastGameBoardPixelTowardsDown) {\n                    currentSnakeHeadPosition =\n                        currentSnakeHeadPosition - SQUARE_OF_GAME_PIXEL_COUNT;\n                }\n                break;\n            default:\n                break;\n        }\n\n        let nextSnakeHeadPixel = gameBoardPixels[currentSnakeHeadPosition];\n\n        // Kill snake if it bites itself:\n        if (nextSnakeHeadPixel.classList.contains(\"snakeBodyPixel\")) {\n            // Stop moving the snake\n            clearInterval(moveSnakeInterval);\n            if (\n                !alert(\n                    `You have ate ${totalFoodAte} food by travelling ${totalDistanceTravelled} blocks.`\n                )\n            )\n                window.location.reload();\n        }\n\n        nextSnakeHeadPixel.classList.add(\"snakeBodyPixel\");\n\n        setTimeout(() => {\n            nextSnakeHeadPixel.classList.remove(\"snakeBodyPixel\");\n        }, snakeLength);\n\n        // Update total distance travelled\n        totalDistanceTravelled++;\n        // Update in UI:\n        document.getElementById(\"blocksTravelled\").innerHTML = totalDistanceTravelled;\n\n        if (currentSnakeHeadPosition == currentFoodPostion) {\n            // Update total food ate\n            totalFoodAte++;\n            // Update in UI:\n            document.getElementById(\"pointsEarned\").innerHTML = totalFoodAte;\n\n            // Increase Snake length:\n            snakeLength = snakeLength + 100;\n            createFood();\n        }\n    };\n\n    /// CALL THE FOLLOWING FUNCTIONS TO RUN THE GAME:\n\n    // Create game board pixels:\n    createGameBoardPixels();\n\n    // Create initial food:\n    createFood();\n\n    // Move snake:\n    var moveSnakeInterval = setInterval(moveSnake, 80);\n\n    // Call change direction function on keyboard key-down event:\n    addEventListener(\"keydown\", (e) => changeDirection(e.keyCode));\n\n    // ON SCREEN CONTROLLERS:\n    const leftButton = document.getElementById(\"leftButton\");\n    const rightButton = document.getElementById(\"rightButton\");\n    const upButton = document.getElementById(\"upButton\");\n    const downButton = document.getElementById(\"downButton\");\n\n    leftButton.onclick = () => changeDirection(LEFT_DIR);\n    rightButton.onclick = () => changeDirection(RIGHT_DIR);\n    upButton.onclick = () => changeDirection(UP_DIR);\n    downButton.onclick = () => changeDirection(DOWN_DIR);\n\n    return (\n        <div>\n\n            <div id=\"gameContainer\"></div>\n\n\n\n            <div id=\"scoreContainer\">\n                <div class=\"scoreBoard\">Food: <span id=\"pointsEarned\">0</span></div>\n                <div class=\"scoreBoard\">Blocks: <span id=\"blocksTravelled\">0</span></div>\n            </div>\n\n\n            <div id=\"onScreenControllers\">\n                <button id=\"leftButton\">◀️</button>\n                <div>\n                    <button id=\"upButton\">🔼</button>\n                    <button id=\"downButton\">🔽</button>\n                </div>\n                <button id=\"rightButton\">▶️</button>\n            </div>\n\n            <div class=\"developerDetails\">\n\n                <div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SnakeGame;\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
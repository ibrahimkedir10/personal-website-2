{"ast":null,"code":"var _jsxFileName = \"/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport './SnakeGame.css';\nimport \"../styles/Home.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(0);\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39);\n  const [currentSnakeHeadPosition, setCurrentSnakeHeadPosition] = useState(SQUARE_OF_GAME_PIXEL_COUNT / 2);\n  const [snakeLength, setSnakeLength] = useState(1000);\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n  const moveSnakeInterval = useRef(null);\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []);\n  useEffect(() => {\n    moveSnakeInterval.current = setInterval(moveSnake, 80);\n    return () => clearInterval(moveSnakeInterval.current);\n  }, [currentSnakeHeadPosition, snakeCurrentDirection]);\n  useEffect(() => {\n    const handleKeyDown = e => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [snakeCurrentDirection]);\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n  const createFood = () => {\n    setGameBoardPixels(prevPixels => {\n      const newPixels = [...prevPixels];\n      if (currentFoodPosition !== null) {\n        newPixels[currentFoodPosition] = 0;\n      }\n      let newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      while (newPixels[newFoodPosition] === 1) {\n        newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      }\n      newPixels[newFoodPosition] = 'food';\n      setCurrentFoodPosition(newFoodPosition);\n      return newPixels;\n    });\n  };\n  const changeDirection = newDirectionCode => {\n    if (newDirectionCode === snakeCurrentDirection) return;\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n  const moveSnake = () => {\n    let nextSnakeHeadPosition;\n    switch (snakeCurrentDirection) {\n      case 37:\n        // LEFT\n        nextSnakeHeadPosition = currentSnakeHeadPosition - 1;\n        if (nextSnakeHeadPosition % GAME_PIXEL_COUNT === GAME_PIXEL_COUNT - 1 || nextSnakeHeadPosition < 0) {\n          nextSnakeHeadPosition += GAME_PIXEL_COUNT;\n        }\n        break;\n      case 38:\n        // UP\n        nextSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n        if (nextSnakeHeadPosition < 0) {\n          nextSnakeHeadPosition += SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      case 39:\n        // RIGHT\n        nextSnakeHeadPosition = currentSnakeHeadPosition + 1;\n        if (nextSnakeHeadPosition % GAME_PIXEL_COUNT === 0) {\n          nextSnakeHeadPosition -= GAME_PIXEL_COUNT;\n        }\n        break;\n      case 40:\n        // DOWN\n        nextSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n        if (nextSnakeHeadPosition > SQUARE_OF_GAME_PIXEL_COUNT - 1) {\n          nextSnakeHeadPosition -= SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      default:\n        break;\n    }\n    setGameBoardPixels(prevPixels => {\n      const newPixels = [...prevPixels];\n\n      // Remove the tail of the snake (set its value to 0)\n      if (newPixels[currentSnakeHeadPosition] === 'snakeBodyPixel') {\n        newPixels[currentSnakeHeadPosition] = 0;\n      }\n\n      // Add the new head position to the snake (set its value to 'snakeBodyPixel')\n      newPixels[nextSnakeHeadPosition] = 'snakeBodyPixel';\n      return newPixels;\n    });\n    setCurrentSnakeHeadPosition(nextSnakeHeadPosition);\n    setTotalDistanceTravelled(prevDistance => prevDistance + 1);\n    if (nextSnakeHeadPosition === currentFoodPosition) {\n      setTotalFoodAte(prevFood => prevFood + 1);\n      setSnakeLength(prevLength => prevLength + 100);\n      createFood();\n    }\n    if (gameBoardPixels[nextSnakeHeadPosition] === 'snakeBodyPixel') {\n      clearInterval(moveSnakeInterval.current);\n      if (!alert(`You have eaten ${totalFoodAte} food by traveling ${totalDistanceTravelled} blocks.`)) window.location.reload();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameBoardPixels.map((pixel, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `gameBoardPixel ${pixel}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"04CPvFtWrNbyYa7/ZDty5QzmC9M=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SnakeGame","_s","GAME_PIXEL_COUNT","SQUARE_OF_GAME_PIXEL_COUNT","Math","pow","gameBoardPixels","setGameBoardPixels","Array","fill","currentFoodPosition","setCurrentFoodPosition","snakeCurrentDirection","setSnakeCurrentDirection","currentSnakeHeadPosition","setCurrentSnakeHeadPosition","snakeLength","setSnakeLength","totalFoodAte","setTotalFoodAte","totalDistanceTravelled","setTotalDistanceTravelled","moveSnakeInterval","createGameBoardPixels","createFood","current","setInterval","moveSnake","clearInterval","handleKeyDown","e","changeDirection","keyCode","document","addEventListener","removeEventListener","prevPixels","newPixels","newFoodPosition","floor","random","newDirectionCode","nextSnakeHeadPosition","prevDistance","prevFood","prevLength","alert","window","location","reload","children","map","pixel","index","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport './SnakeGame.css';\nimport \"../styles/Home.css\";\n\nconst SnakeGame = () => {\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(0);\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39);\n  const [currentSnakeHeadPosition, setCurrentSnakeHeadPosition] = useState(SQUARE_OF_GAME_PIXEL_COUNT / 2);\n  const [snakeLength, setSnakeLength] = useState(1000);\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n\n  const moveSnakeInterval = useRef(null);\n\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []);\n\n  useEffect(() => {\n    moveSnakeInterval.current = setInterval(moveSnake, 80);\n    return () => clearInterval(moveSnakeInterval.current);\n  }, [currentSnakeHeadPosition, snakeCurrentDirection]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [snakeCurrentDirection]);\n\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n\n  const createFood = () => {\n    setGameBoardPixels((prevPixels) => {\n      const newPixels = [...prevPixels];\n      if (currentFoodPosition !== null) {\n        newPixels[currentFoodPosition] = 0;\n      }\n\n      let newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      while (newPixels[newFoodPosition] === 1) {\n        newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n      }\n\n      newPixels[newFoodPosition] = 'food';\n      setCurrentFoodPosition(newFoodPosition);\n\n      return newPixels;\n    });\n  };\n\n  const changeDirection = (newDirectionCode) => {\n    if (newDirectionCode === snakeCurrentDirection) return;\n\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n\n  const moveSnake = () => {\n    let nextSnakeHeadPosition;\n\n    switch (snakeCurrentDirection) {\n      case 37: // LEFT\n        nextSnakeHeadPosition = currentSnakeHeadPosition - 1;\n        if (nextSnakeHeadPosition % GAME_PIXEL_COUNT === GAME_PIXEL_COUNT - 1 || nextSnakeHeadPosition < 0) {\n          nextSnakeHeadPosition += GAME_PIXEL_COUNT;\n        }\n        break;\n      case 38: // UP\n        nextSnakeHeadPosition = currentSnakeHeadPosition - GAME_PIXEL_COUNT;\n        if (nextSnakeHeadPosition < 0) {\n          nextSnakeHeadPosition += SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      case 39: // RIGHT\n        nextSnakeHeadPosition = currentSnakeHeadPosition + 1;\n        if (nextSnakeHeadPosition % GAME_PIXEL_COUNT === 0) {\n          nextSnakeHeadPosition -= GAME_PIXEL_COUNT;\n        }\n        break;\n      case 40: // DOWN\n        nextSnakeHeadPosition = currentSnakeHeadPosition + GAME_PIXEL_COUNT;\n        if (nextSnakeHeadPosition > SQUARE_OF_GAME_PIXEL_COUNT - 1) {\n          nextSnakeHeadPosition -= SQUARE_OF_GAME_PIXEL_COUNT;\n        }\n        break;\n      default:\n        break;\n    }\n\n    setGameBoardPixels((prevPixels) => {\n      const newPixels = [...prevPixels];\n\n      // Remove the tail of the snake (set its value to 0)\n      if (newPixels[currentSnakeHeadPosition] === 'snakeBodyPixel') {\n        newPixels[currentSnakeHeadPosition] = 0;\n      }\n\n      // Add the new head position to the snake (set its value to 'snakeBodyPixel')\n      newPixels[nextSnakeHeadPosition] = 'snakeBodyPixel';\n\n      return newPixels;\n    });\n\n    setCurrentSnakeHeadPosition(nextSnakeHeadPosition);\n\n    setTotalDistanceTravelled((prevDistance) => prevDistance + 1);\n\n    if (nextSnakeHeadPosition === currentFoodPosition) {\n      setTotalFoodAte((prevFood) => prevFood + 1);\n      setSnakeLength((prevLength) => prevLength + 100);\n      createFood();\n    }\n\n    if (gameBoardPixels[nextSnakeHeadPosition] === 'snakeBodyPixel') {\n      clearInterval(moveSnakeInterval.current);\n      if (!alert(`You have eaten ${totalFoodAte} food by traveling ${totalDistanceTravelled} blocks.`))\n        window.location.reload();\n    }\n  };\n\n  return (\n    <div>\n      {gameBoardPixels.map((pixel, index) => (\n        <div key={index} className={`gameBoardPixel ${pixel}`} />\n      ))}\n      {/* Other JSX for scores, controls, etc. */}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
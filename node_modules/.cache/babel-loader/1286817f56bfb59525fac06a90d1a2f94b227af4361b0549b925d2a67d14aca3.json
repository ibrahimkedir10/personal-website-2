{"ast":null,"code":"var _jsxFileName = \"/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport \"../styles/SnakeGame.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SnakeGame = () => {\n  _s();\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(null);\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39);\n  const [currentSnake, setCurrentSnake] = useState([SQUARE_OF_GAME_PIXEL_COUNT / 2]);\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n  const moveSnakeInterval = useRef(null);\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []);\n  useEffect(() => {\n    moveSnakeInterval.current = setInterval(moveSnake, 80);\n    return () => clearInterval(moveSnakeInterval.current);\n  }, [currentSnake, currentFoodPosition, snakeCurrentDirection]);\n  useEffect(() => {\n    const handleKeyDown = e => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [snakeCurrentDirection]);\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n  const createFood = () => {\n    let newFoodPosition;\n    do {\n      newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n    } while (gameBoardPixels[newFoodPosition] !== 0);\n    setGameBoardPixels(prevPixels => {\n      const newPixels = [...prevPixels];\n      newPixels[newFoodPosition] = 'food';\n      return newPixels;\n    });\n    setCurrentFoodPosition(newFoodPosition);\n  };\n  const changeDirection = newDirectionCode => {\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n  const moveSnake = () => {\n    const newSnake = [...currentSnake];\n    let head = newSnake[0];\n    switch (snakeCurrentDirection) {\n      case 37:\n        // LEFT\n        head = head - 1;\n        break;\n      case 38:\n        // UP\n        head = head - GAME_PIXEL_COUNT;\n        break;\n      case 39:\n        // RIGHT\n        head = head + 1;\n        break;\n      case 40:\n        // DOWN\n        head = head + GAME_PIXEL_COUNT;\n        break;\n      default:\n        break;\n    }\n    if (head === currentFoodPosition) {\n      newSnake.unshift(currentFoodPosition);\n      createFood();\n      setTotalFoodAte(prevFood => prevFood + 1);\n    } else {\n      newSnake.unshift(head);\n      const tail = newSnake.pop();\n      setGameBoardPixels(prevPixels => {\n        const newPixels = [...prevPixels];\n        newPixels[tail] = 0;\n        return newPixels;\n      });\n    }\n    setCurrentSnake(newSnake);\n    setTotalDistanceTravelled(prevDistance => prevDistance + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: gameBoardPixels.map((pixel, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `gameBoardPixel ${pixel}`\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 106,\n    columnNumber: 5\n  }, this);\n};\n_s(SnakeGame, \"aFNV7O7QRuFm8iBEkGH0OL+7pu8=\");\n_c = SnakeGame;\nexport default SnakeGame;\nvar _c;\n$RefreshReg$(_c, \"SnakeGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","SnakeGame","_s","GAME_PIXEL_COUNT","SQUARE_OF_GAME_PIXEL_COUNT","Math","pow","gameBoardPixels","setGameBoardPixels","Array","fill","currentFoodPosition","setCurrentFoodPosition","snakeCurrentDirection","setSnakeCurrentDirection","currentSnake","setCurrentSnake","totalFoodAte","setTotalFoodAte","totalDistanceTravelled","setTotalDistanceTravelled","moveSnakeInterval","createGameBoardPixels","createFood","current","setInterval","moveSnake","clearInterval","handleKeyDown","e","changeDirection","keyCode","document","addEventListener","removeEventListener","newFoodPosition","floor","random","prevPixels","newPixels","newDirectionCode","newSnake","head","unshift","prevFood","tail","pop","prevDistance","children","map","pixel","index","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ibrahimkedir/Documents/GitHub/personal-website-2/src/pages/snakegame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport \"../styles/SnakeGame.css\";\n\n\nconst SnakeGame = () => {\n  const GAME_PIXEL_COUNT = 40;\n  const SQUARE_OF_GAME_PIXEL_COUNT = Math.pow(GAME_PIXEL_COUNT, 2);\n\n  const [gameBoardPixels, setGameBoardPixels] = useState(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  const [currentFoodPosition, setCurrentFoodPosition] = useState(null);\n  const [snakeCurrentDirection, setSnakeCurrentDirection] = useState(39);\n  const [currentSnake, setCurrentSnake] = useState([SQUARE_OF_GAME_PIXEL_COUNT / 2]);\n  const [totalFoodAte, setTotalFoodAte] = useState(0);\n  const [totalDistanceTravelled, setTotalDistanceTravelled] = useState(0);\n\n  const moveSnakeInterval = useRef(null);\n\n  useEffect(() => {\n    createGameBoardPixels();\n    createFood();\n  }, []);\n\n  useEffect(() => {\n    moveSnakeInterval.current = setInterval(moveSnake, 80);\n    return () => clearInterval(moveSnakeInterval.current);\n  }, [currentSnake, currentFoodPosition, snakeCurrentDirection]);\n\n  useEffect(() => {\n    const handleKeyDown = (e) => changeDirection(e.keyCode);\n    document.addEventListener('keydown', handleKeyDown);\n\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [snakeCurrentDirection]);\n\n  const createGameBoardPixels = () => {\n    setGameBoardPixels(Array(SQUARE_OF_GAME_PIXEL_COUNT).fill(0));\n  };\n\n  const createFood = () => {\n    let newFoodPosition;\n    do {\n      newFoodPosition = Math.floor(Math.random() * SQUARE_OF_GAME_PIXEL_COUNT);\n    } while (gameBoardPixels[newFoodPosition] !== 0);\n\n    setGameBoardPixels((prevPixels) => {\n      const newPixels = [...prevPixels];\n      newPixels[newFoodPosition] = 'food';\n      return newPixels;\n    });\n\n    setCurrentFoodPosition(newFoodPosition);\n  };\n\n  const changeDirection = (newDirectionCode) => {\n    if (newDirectionCode === 37 && snakeCurrentDirection !== 39) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 38 && snakeCurrentDirection !== 40) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 39 && snakeCurrentDirection !== 37) {\n      setSnakeCurrentDirection(newDirectionCode);\n    } else if (newDirectionCode === 40 && snakeCurrentDirection !== 38) {\n      setSnakeCurrentDirection(newDirectionCode);\n    }\n  };\n\n  const moveSnake = () => {\n    const newSnake = [...currentSnake];\n    let head = newSnake[0];\n\n    switch (snakeCurrentDirection) {\n      case 37: // LEFT\n        head = head - 1;\n        break;\n      case 38: // UP\n        head = head - GAME_PIXEL_COUNT;\n        break;\n      case 39: // RIGHT\n        head = head + 1;\n        break;\n      case 40: // DOWN\n        head = head + GAME_PIXEL_COUNT;\n        break;\n      default:\n        break;\n    }\n\n    if (head === currentFoodPosition) {\n      newSnake.unshift(currentFoodPosition);\n      createFood();\n      setTotalFoodAte((prevFood) => prevFood + 1);\n    } else {\n      newSnake.unshift(head);\n      const tail = newSnake.pop();\n      setGameBoardPixels((prevPixels) => {\n        const newPixels = [...prevPixels];\n        newPixels[tail] = 0;\n        return newPixels;\n      });\n    }\n\n    setCurrentSnake(newSnake);\n    setTotalDistanceTravelled((prevDistance) => prevDistance + 1);\n  };\n\n  return (\n    <div>\n      {gameBoardPixels.map((pixel, index) => (\n        <div key={index} className={`gameBoardPixel ${pixel}`} />\n      ))}\n    </div>\n  );\n};\n\nexport default SnakeGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}